{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","state","response","post","name","email","responseToPost","handleMailchimp","e","a","thankYouMessage","document","querySelector","preventDefault","fetch","method","headers","body","JSON","stringify","json","classList","add","setState","className","onSubmit","this","class","for","type","value","onChange","target","id","href","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"gPAAe,I,YC4DAA,E,4MArDbC,MAAQ,CACNC,SAAU,GACVC,KAAM,GACNC,KAAM,GACNC,MAAO,GACPC,eAAgB,I,EAGlBC,gB,uCAAkB,WAAMC,GAAN,mBAAAC,EAAA,6DACVC,EAAkBC,SAASC,cAAc,sBAC/CJ,EAAEK,iBAFc,SAGOC,MAAM,2BAA4B,CACvDC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEf,KAAM,EAAKH,MAAMG,KAAMC,MAAO,EAAKJ,MAAMI,UARlD,cAGVH,EAHU,gBAWGA,EAASkB,OAXZ,OAaH,aAFPH,EAXU,SAcdP,EAAgBW,UAAUC,IAAI,QAGhC,EAAKC,SAAS,CAAEjB,eAAgBW,IAjBhB,4C,kGAqBlB,WAAU,IAAD,OACP,OACE,sBAAKO,UAAU,MAAf,UACE,uBAAMC,SAAUC,KAAKnB,gBAAiBoB,MAAM,6BAA5C,UACI,sBAAKA,MAAM,aAAX,UACI,uBAAOA,MAAM,aAAaC,IAAI,YAA9B,wBACA,uBAAOD,MAAM,aAAaE,KAAK,OAAOC,MAAOJ,KAAKzB,MAAMG,KAAM2B,SAAU,SAAAvB,GAAC,OAAI,EAAKe,SAAS,CAAEnB,KAAMI,EAAEwB,OAAOF,SAAUG,GAAG,iBAE7H,sBAAKN,MAAM,aAAX,UACI,uBAAOA,MAAM,aAAaC,IAAI,QAA9B,mBACA,uBAAOD,MAAM,aAAaE,KAAK,OAAOC,MAAOJ,KAAKzB,MAAMI,MAAO0B,SAAU,SAAAvB,GAAC,OAAI,EAAKe,SAAS,CAAElB,MAAOG,EAAEwB,OAAOF,SAAU1B,KAAK,QAAQ6B,GAAG,aAE5I,uBAAOJ,KAAK,SAASF,MAAM,kBAAkBG,MAAM,WACnD,oBAAGG,GAAG,oBAAN,iDAC8B,iEAAmC,mBAAGC,KAAK,mFAAR,kCAGrE,4BAAIR,KAAKzB,MAAMK,wB,GA/CL6B,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpC,SAASqC,eAAe,SAM1BZ,M","file":"static/js/main.c1a92d02.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from 'react';\n\nimport logo from './logo.svg';\n\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    response: '',\n    post: '',\n    name: '',\n    email: '',\n    responseToPost: '',\n  };\n\n  handleMailchimp = async e => {\n    const thankYouMessage = document.querySelector('#thank-you-message');\n    e.preventDefault();\n    const response = await fetch('./netlify/functions/test', {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ name: this.state.name, email: this.state.email }),\n    })\n\n    const body = await response.json();\n\n    if (body === \"success\") {\n      thankYouMessage.classList.add('show');\n    }\n\n    this.setState({ responseToPost: body }); \n    \n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <form onSubmit={this.handleMailchimp} class=\"centered mt-10 ml-10 mr-10\">\n            <div class=\"form-group\">\n                <label class=\"form-label\" for=\"firstname\">First Name</label>\n                <input class=\"form-input\" type=\"text\" value={this.state.name} onChange={e => this.setState({ name: e.target.value })} id=\"firstname\"/>\n            </div>\n            <div class=\"form-group\">\n                <label class=\"form-label\" for=\"email\">Email</label>\n                <input class=\"form-input\" type=\"text\" value={this.state.email} onChange={e => this.setState({ email: e.target.value })} name=\"email\" id=\"email\"/>\n            </div>\n            <input type=\"submit\" class=\"btn btn-primary\" value=\"Submit\"/>\n            <p id=\"thank-you-message\">\n            Obrigada pela tua subscrição! <strong>Faz o download do teu guia <a href=\"https://drive.google.com/uc?export=download&id=18q_SSC1y46mJIEQZeeeRaJwTorSij-SO\">neste link.</a></strong>            \n            </p>\n        </form>\n        <p>{this.state.responseToPost}</p>\n\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}